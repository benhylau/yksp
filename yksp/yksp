#! /usr/bin/env python
'''
Copyright (C) 2014 Benedict Lau

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''

import sys
import os
import getopt
import shutil
import signal
import subprocess
import time
import datetime
import re

from Queue import Queue
from multiprocessing import Process

try:
    sys.path.append(os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))
except:
    pass

from com.dtmilano.android.viewclient import ViewClient    

############
# Constants
############
FILENAME_DEVICE_SERIALS = 'serials.txt'
FILENAME_DEVICE_PROPERTIES = 'device.txt'
FILENAME_LOGCAT = 'logcat.txt'
FILENAME_PYUNIT = 'pyunit.txt'
FILENAME_APP_DATA_BACKUP = 'data.ab'

FOLDER_APP_DATA = 'data'
FOLDER_SCREENSHOTS = 'screenshots'
FOLDER_SCREENDUMPS = 'screendumps'

DIR_TEST_SCRIPTS = 'scripts'
DIR_TEST_RESULTS = 'results'
DIR_TEST_SESSION = '%s/%s' % (DIR_TEST_RESULTS, datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d-%H-%M-%S'))

PACKAGE_BACKUP_CONFIRM = 'com.android.backupconfirm'
ID_BUTTON_BACKUP_ACCEPT = 'id/no_id/21'

###################
# Global variables
###################
runLinear = False
fromPackage = None
skipDump = False

processes = []
subprocesses = Queue()
childSubprocesses = Queue() # Each child has it's own instance of this queue

##########
# Methods
##########
def signalHandler(signum, frame):
    '''
    SIGINT handler for the main process.
    '''
    print 'Terminating test session...'
    killProcesses(processes)
    killSubprocesses(subprocesses)
    sys.exit(0)

def childProcessSignalHandler(signum, frame):
    '''
    SIGTERM handler for the child processes.
    '''
    killSubprocesses(childSubprocesses)
    sys.exit(0)

def killProcesses(processList):
    '''
    Kills all active processes in a list.

    @type processList: list
    @param processList: A list containing all the processes to kill.
    '''
    for p in processList:
        if p.is_alive():
            try:
                os.killpg(p.pid, signal.SIGTERM)

                # Allow up to 10 seconds for the process to terminate
                i = 0
                while p.is_alive() and i < 20:
                    time.sleep(0.5)
                    i += 1
            except os.error:
                pass

        if p.is_alive():
            print 'Process %s [%s] is not terminated' % (p.pid, p.name)
        else:
            print 'Process %s [%s] is terminated' % (p.pid, p.name)

def killSubprocesses(subprocessQueue):
    '''
    Kills all active subprocesses in a queue.

    @type subprocessQueue: Queue
    @param subprocessQueue: A queue containing all the subprocesses to kill.
    '''
    while subprocessQueue.empty() is False:
        p = subprocessQueue.get()
        if p.poll() is None:
            try:
                os.killpg(p.pid, signal.SIGTERM)

                # Allow up to 10 seconds for the subprocess to terminate
                i = 0
                while p.poll() is None and i < 20:
                    time.sleep(0.5)
                    i += 1
            except os.error:
                pass

        if p.poll() is None:
            print 'Subprocess %s is not terminated' % p.pid
        else:
            print 'Subprocess %s is terminated' % p.pid

def validate(value):
    '''
    Terminates execution if value=False. Does nothing otherwise.

    @type value: boolean
    @param value: The value to validate.
    '''
    if value is False:
        sys.exit(0)

def execCommand(cmd, subprocessQueue, msg=None, wait=True):
    '''
    Executes shell command in a subprocess.

    @type cmd: str
    @param cmd: The shell command to execute.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add the new subprocess to.
    @type msg: str
    @param msg: An optional message to print to stdout.
    @type wait: boolean
    @param wait: True to block execution until the subprocess finishes.
    @return: The tuple (subprocess running the command, stdoutdata, stderrdata). If wait=False, stdoutdata and stderrdata are None. 
    '''
    if msg:
        print msg

    # Attach session id to use process group for terminating child process
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=os.setsid)
    subprocessQueue.put(p)
    if wait:
        stdData = p.communicate()
        returnData = (p, stdData[0], stdData[1])
    else:
        returnData = (p, None, None)
    return returnData

def findApk():
    '''
    Scan for APK.

    @return: The APK filename; or None if not found.
    '''
    apkFilename = None
    print 'Scanning for APK...'
    for filename in os.listdir('.'):
        if filename.endswith('.apk'):
            apkFilename = filename
            break

    if apkFilename:
        print 'APK: %s' % apkFilename
    else:
        print 'Failed to find APK'
    return apkFilename

def inspectApk(apkFilename, subprocessQueue):
    '''
    Inspect APK and get the package name.

    @type apkFilename: str
    @param apkFilename: The APK filename.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    @return: The application package name found in a valid APK file; or None if the APK is invalid.
    '''
    packageName = None
    tApk = execCommand('aapt dump badging %s | grep "package"' % apk, subprocessQueue, 'Inspecting APK...')
    if tApk[1]:
        packageName = re.search(r"name='(.*?)'", tApk[1]).group(1)
        versionCode = re.search(r"versionCode='(.*?)'", tApk[1]).group(1)
        versionName = re.search(r"versionName='(.*?)'", tApk[1]).group(1)
        print 'Package name: %s' % packageName    
        print 'Version name: %s' % versionName
        print 'Version code: %s' % versionCode
    else:
        print 'Failed to validate APK'
    return packageName

def findScripts():
    '''
    Scan for test scripts.

    @return: The list of test scripts; or an empty list if none is found.
    '''
    scriptFilenames = []
    print 'Scanning for test scripts...'
    if os.path.isdir(DIR_TEST_SCRIPTS):
        for filename in os.listdir(DIR_TEST_SCRIPTS):
            if filename.endswith('.py'):
                scriptFilenames.append(filename)

    if scriptFilenames:
        for i in range(0, len(scriptFilenames)):
            print 'Script %s: %s' % (i + 1, scriptFilenames[i])
    else:
        print 'No test scripts available'
    return scriptFilenames

def findDevices(subprocessQueue):
    '''
    List connected devices.

    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    @return: The list of device serial numbers; or an empty list if none is found.
    '''
    serialNumbers = []
    execCommand('adb devices | grep -v devices > %s/%s' % (DIR_TEST_SESSION, FILENAME_DEVICE_SERIALS), subprocessQueue, 'Listing devices...')
    serialsFile = open('%s/%s' % (DIR_TEST_SESSION, FILENAME_DEVICE_SERIALS), 'r')
    for line in serialsFile:
        match = re.search(r'([^\s]+)', line)
        if (match):
            serialNumber = match.group(0)
            serialNumbers.append(serialNumber)
            print 'Device %s: %s' % (len(serialNumbers), serialNumber)

    if (len(serialNumbers) == 0):
        print 'No devices available'
    return serialNumbers

def collectDeviceProperties(serialNumber, dirRoot, subprocessQueue):
    '''
    Collect device properties of the specified device.

    @type serialNumber: str
    @param serialNumber: The device serial number.
    @type dirRoot: str
    @param dirRoot: The root directory to put the device properties.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    execCommand('adb -s %s shell getprop > %s/%s' % (serialNumber, dirRoot, FILENAME_DEVICE_PROPERTIES), subprocessQueue, '[%s] Collecting device properties...' % serialNumber)
    properties = execCommand('grep ro.product.manufacturer %s/%s | while read line; do echo "[%s] $line"; done; grep ro.product.model %s/%s | while read line; do echo "[%s] $line"; done; grep ro.build.version.sdk %s/%s | while read line; do echo "[%s] $line"; done; ' % (dirRoot, FILENAME_DEVICE_PROPERTIES, serialNumber, dirRoot, FILENAME_DEVICE_PROPERTIES, serialNumber, dirRoot, FILENAME_DEVICE_PROPERTIES, serialNumber), subprocessQueue)[1]
    print properties

def installApp(apkFilename, packageName, serialNumber, subprocessQueue):
    '''
    Install app on the specified device after uninstalling any preexisting installation.

    @type apkFilename: str
    @param apkFilename: The filename of the APK to install.
    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to install the APK.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    execCommand('adb -s %s uninstall %s; adb -s %s install %s' % (serialNumber, packageName, serialNumber, apkFilename), subprocessQueue, '[%s] Installing APK...' % serialNumber)

def uninstallApp(packageName, serialNumber, subprocessQueue):
    '''
    Uninstall app by application package name on the specified device.

    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to install the APK.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    execCommand('adb -s %s uninstall %s' % (serialNumber, packageName), subprocessQueue, '[%s] Uninstalling application...' % serialNumber)

def wipeAppData(packageName, serialNumber, subprocessQueue):
    '''
    Wipes app data on device.

    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to run the tests.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    # Wipe only if package exists, otherwise the ADB clear data command hangs
    packagePath = execCommand('adb -s %s shell pm path %s' % (serialNumber, packageName), subprocessQueue)[1]
    if packagePath:
        execCommand('adb -s %s shell pm clear %s' % (serialNumber, packageName), subprocessQueue, '[%s] Wiping app data...' % serialNumber)

def executeTestCase(packageName, serialNumber, dirRoot, scriptFilename, dataDump, subprocessQueue):
    '''
    Executes a test script and performs all logging and clean-up associated with running the test case.

    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to run this test case.
    @type dirRoot: str
    @param dirRoot: The root directory to put the results of this test case.
    @type scriptFilename: str
    @param scriptFilename: The test script to run.
    @type dataDump: boolean
    @param dataDump: True to dump app data after executing each test script; or False to skip.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    # Create directories to store test case results
    dirResults = '%s/%s' % (dirRoot, os.path.splitext(scriptFilename)[0])
    os.mkdir(dirResults)
    dirData = '%s/%s' % (dirResults, FOLDER_APP_DATA)
    os.mkdir(dirData)
    
    # Make a local copy of the test script
    shutil.copy('%s/%s' % (DIR_TEST_SCRIPTS, scriptFilename), dirResults)

    # Wipe app data
    wipeAppData(packageName, serialNumber, subprocessQueue)

    # Start logcat
    execCommand('adb -s %s logcat -c' % serialNumber, subprocessQueue, '[%s] Clearing logcat buffer...' % serialNumber)
    pLogcat = execCommand('adb -s %s logcat -v threadtime > %s/%s' % (serialNumber, dirResults, FILENAME_LOGCAT), subprocessQueue, '[%s] Start printing logcat output to file...' % serialNumber, wait=False)[0]

    # Execute local copy of the test script
    runTestCmd = 'python %s/%s --package %s --serial %s --root %s --logs %s --screenshots %s --screendumps %s' % (dirResults, scriptFilename, packageName, serialNumber, dirResults, FILENAME_PYUNIT, FOLDER_SCREENSHOTS, FOLDER_SCREENDUMPS)
    execCommand(runTestCmd, subprocessQueue, '[%s] Executing [%s] with command:\n%s' % (serialNumber, scriptFilename, runTestCmd))

    # Stop logcat
    os.killpg(pLogcat.pid, signal.SIGTERM)
    print '[%s] Logcat output saved' % serialNumber

    # Perform app data dump if enabled
    if dataDump:
        # Force-stop any stale backup confirmations
        execCommand('adb -s %s shell am force-stop %s' % (serialNumber, PACKAGE_BACKUP_CONFIRM), subprocessQueue)

        # Send app backup request
        appDataBackup = '%s/%s' % (dirResults, FILENAME_APP_DATA_BACKUP)
        pBackup = execCommand('adb -s %s backup -f %s %s' % (serialNumber, appDataBackup, packageName), subprocessQueue, '[%s] Downloading app data from device...' % serialNumber, wait=False)[0]

        # Send button click to accept backup on device
        device, serialno = ViewClient.connectToDeviceOrExit(serialno=serialNumber)
        vc = ViewClient(device, serialno)
        acceptButton = vc.findViewById(ID_BUTTON_BACKUP_ACCEPT)
        if acceptButton and acceptButton.isEnabled():
            acceptButton.touch()

            # Wait for backup to complete
            pBackup.communicate()

            # Wait to prevent deadlock
            time.sleep(1)

            # Extract backed up data
            tExtract = execCommand('dd if=%s/%s bs=1 skip=24 | python -c "import zlib, sys; sys.stdout.write(zlib.decompress(sys.stdin.read()))" | tar -xvf - -C %s' % (dirResults, FILENAME_APP_DATA_BACKUP, dirData), subprocessQueue, '[%s] Extracting app data...' % serialNumber)
            print tExtract[1]
            print tExtract[2]

            print '[%s] App data downloaded' % serialNumber
        else:
            os.killpg(pBackup.pid, signal.SIGTERM)

            # Clean up backup confirmation and corrupt backup file
            execCommand('adb -s %s shell am force-stop %s' % (serialNumber, PACKAGE_BACKUP_CONFIRM), subprocessQueue)
            if (os.path.isfile(appDataBackup)):        
                os.remove(appDataBackup)

            print '[%s] Failed to download app data' % serialNumber
    else:
        print '[%s] App data dump skipped' % serialNumber

    # Wipe app data
    wipeAppData(packageName, serialNumber, subprocessQueue)


def executeTestsOnDevice(apkFilename, packageName, serialNumber, dataDump, subprocessQueue):
    '''
    Executes all the tests on a device.

    @type apkFilename: str
    @param apkFilename: The APK filename; or None to skip installing and uninstalling of APK.
    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to run the tests.
    @type dataDump: boolean
    @param dataDump: True to dump app data after executing each test script; or False to skip.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    model = execCommand('adb -s %s shell getprop ro.product.model' % serialNumber, subprocessQueue)[1].strip()
    dirDeviceRoot = '%s/%s-[%s]' % (DIR_TEST_SESSION, re.sub('\s+', '-', model), serialNumber)
    os.mkdir(dirDeviceRoot)
    collectDeviceProperties(serialNumber, dirDeviceRoot, subprocessQueue)

    if apkFilename:
        installApp(apkFilename, packageName, serialNumber, subprocessQueue)

    for i in range(0, len(scripts)):
        print '[%s] Preparing test case %s of %s [%s] on %s...' % (serialNumber, i + 1, len(scripts), scripts[i], model)
        executeTestCase(packageName, serialNumber, dirDeviceRoot, scripts[i], dataDump, subprocessQueue)

    if apkFilename:
        uninstallApp(packageName, serialNumber, subprocessQueue)

def executeTestsOnDeviceInNewProcess(apkFilename, packageName, serialNumber, dataDump, subprocessQueue):
    '''
    Executes all the tests on a device in a new process.

    @type apkFilename: str
    @param apkFilename: The APK filename; or None to skip installing and uninstalling of APK.
    @type packageName: str
    @param packageName: The application package name.
    @type serialNumber: str
    @param serialNumber: The serial number of the device to run the tests.
    @type dataDump: boolean
    @param dataDump: True to dump app data after executing each test script; or False to skip.
    @type subprocessQueue: Queue
    @param subprocessQueue: The queue to add new subprocesses to.
    '''
    os.setsid()
    signal.signal(signal.SIGTERM, childProcessSignalHandler)
    executeTestsOnDevice(apkFilename, packageName, serialNumber, dataDump, subprocessQueue)

def parseArgs(argv):
    try:
        opts, args = getopt.getopt(argv[1:], 'hla:d', ['help', 'linear', 'noapk=', 'nodump'])
    except getopt.GetoptError:
        usage(2)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage(2)
        elif opt in ('-l', '--linear'):
            global runLinear
            runLinear = True
        elif opt in ('-a', '--noapk'):
            global fromPackage
            fromPackage = arg
        elif opt in ('-d', '--nodump'):
            global skipDump
            skipDump = True

def usage(exitVal=0):
    print '\nUsage:'
    print '-h, --help               OPTIONAL    print this help and exit'
    print '-l, --linear             OPTIONAL    run tests on one device after another'
    print '-a, --noapk <package>    OPTIONAL    disable APK installation and run tests using the pre-installed application with the specified package name'
    print '-d, --nodump             OPTIONAL    disable app data dump after executing each test script'
    sys.exit(exitVal)


#######
# Main
#######
signal.signal(signal.SIGINT, signalHandler)
timeStart = time.time()
parseArgs(sys.argv)

# Find APK and package name
apk = None
package = None
if fromPackage:
    package = fromPackage
else:
    apk = findApk()
    validate(apk is not None)

    package = inspectApk(apk, subprocesses)
    validate(package is not None)

# Find test scripts
scripts = findScripts()
validate(len(scripts) > 0)

# Create directories to store test results
if os.path.isdir(DIR_TEST_RESULTS) is False:
    os.mkdir(DIR_TEST_RESULTS)
os.mkdir(DIR_TEST_SESSION)

# Find available devices
unverifiedSerials = findDevices(subprocesses)
serials = []
if fromPackage and len(unverifiedSerials) > 0:
    print 'Verifying package %s exists on devices...' % package
    for serial in unverifiedSerials:
        packagePath = execCommand('adb -s %s shell pm path %s' % (serial, package), subprocesses)[1]
        if packagePath:
            serials.append(serial)
            print 'Device %s verified' % serial
        else:
            print 'Device %s skipped' % serial
else:
    serials = unverifiedSerials
validate(len(serials) > 0)

# Run tests on all available devices
if runLinear:
    for serial in serials:
        executeTestsOnDevice(apk, package, serial, not skipDump, subprocesses)
else:
    for serial in serials:
        p = Process(target=executeTestsOnDeviceInNewProcess, name='yksp-%s' % serial, args=(apk, package, serial, not skipDump, childSubprocesses))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()

# Report completion of test session
scriptString = '1 test script'
if len(scripts) > 1: scriptString = 'All %s test scripts' % len(scripts)
deviceString = '1 device'
if len(serials) > 1: deviceString = '%s devices' % len(serials)
print '%s executed on %s in %s seconds' % (scriptString, deviceString, int(time.time() - timeStart))

