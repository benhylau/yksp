{"name":"yksp","tagline":"let 'em test 'emselves","body":"// TODO\r\n\r\n## Getting set up\r\nThis assumes your environment has `python`, `easy_install` and `git`. You may confirm each installation by typing the following commands in your Terminal.\r\n\r\n```\r\n$ which python\r\n$ which easy_install\r\n$ which git\r\n```\r\n\r\n### step one\r\nYou may skip this step if you already have the **Android SDK** installed.\r\n\r\nDownload the [Android SDK](http://developer.android.com/sdk/index.html). You may download the stand-alone package for your platform instead of the IDE bundles. After extracting the package, you need to download the following tools, as they are not included in the SDK package.\r\n\r\n1. Android SDK Tools\r\n2. Android SDK Platform-tools\r\n3. Android SDK Build-tools\r\n\r\nYou will download these tools by using yet another tool, which is included in the SDK package. Replace `android-sdk-root` with the local path to your extracted SDK root directory.\r\n\r\n```\r\n$ cd android-sdk-root/tools\r\n$ android list sdk --all\r\n$ android update sdk --no-ui --all --filter 1,2,3\r\n```\r\n\r\n### step two\r\nInstall the **Python Imagineg Library** and **AndroidViewClient** by @dtmilano.\r\n\r\n```\r\n$ sudo easy_install --upgrade --find-links http://www.pythonware.com/products/pil/ Imaging\r\n$ sudo easy_install --upgrade androidviewclient\r\n```\r\n\r\n### step three\r\nClone the **yksp** repo, and **AndroidViewClient** as a submodule.\r\n\r\n```\r\n$ git clone git://github.com/benhylau/yksp.git\r\n$ git submodule init\r\n$ git submodule update\r\n```\r\n\r\n### step four\r\nSet the environment variable `$YKSP_HOME`, and also `$ANDROID_HOME` if not already set. Then configure your `$PATH`.\r\n\r\nOn a Mac\r\n\r\n```\r\n$ sudo nano ~/.bash_profile\r\n```\r\n\r\nOn Ubuntu\r\n\r\n```\r\n$ sudo nano /etc/profile.d/yksp.sh\r\n```\r\n\r\nAdd the following text, replacing `android-sdk-root`, `yksp-root`, and `build-tools-version` with your local paths. Log out and log back in.\r\n\r\n```\r\nexport ANDROID_HOME=android-sdk-root\r\nexport YKSP_HOME=yksp-root/yksp\r\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/build-tools-version:$YKSP_HOME\r\n```\r\n\r\nAnd... you're all set!\r\n\r\n## Running the example\r\nThe yksp repo has an `examples/flying-photo-booth-tests` folder, containing the [Flying PhotoBooth](https://play.google.com/store/apps/details?id=com.groundupworks.flyingphotobooth) APK, along with its PyUnit test scripts in a `scripts` folder. Connect one or more Android devices to your computer, and this is all you need to run a typical yksp test session.\r\n\r\n```\r\n$ cd $YKSP_HOME/../examples/flying-photo-booth-tests\r\n$ yksp\r\n```\r\n\r\nOberserve the test session logs in your Terminal. Results are stored in the newly created `results` folder, with each test session in a folder named with its own timestamp.\r\n\r\n### what just happened?\r\n// TODO\r\n\r\n### where are my results?\r\n// TODO\r\n\r\n## Creating test scripts\r\nTest scripts define subclasses of `YkspTestCase` based on the [PyUnit](https://wiki.python.org/moin/PyUnit) framework. You will define and implement one or more methods with names starting with `test`, like such `def testSomething(self):`. To figure out what goes in the implementation, a good way to start is to look at [testCapture.py](https://github.com/benhylau/yksp/blob/master/examples/flying-photo-booth-tests/scripts/testCapture.py) and [testAbandonLinking.py](https://github.com/benhylau/yksp/blob/master/examples/flying-photo-booth-tests/scripts/testAbandonLinking.py) in `examples/flying-photo-booth-tests/scripts`.\r\n\r\nFrom the examples, you will find that the `YkspTestCase` class provides the following convenience methods, documented [here](https://github.com/benhylau/yksp/blob/master/yksp/yksptestcase.py).\r\n\r\n```python\r\nlaunchApp(package=None)\r\nrefreshScreen(sleep=1)\r\nsaveScreen(tag=None, sleep=1)\r\n```\r\n\r\nIt is important that `refreshScreen()` or `saveScreen()` be called after each screen transition on your device, in order for the test to pick up the updated view tree.\r\n\r\nTo send UI events to your device, we rely on [AndroidViewClient](https://github.com/dtmilano/AndroidViewClient) by @dtmilano. You have already downloaded the documentaion to here `$YKSP_HOME/../AndroidViewClient/AndroidViewClient/doc` as part of the submodule.\r\n\r\nTo pass or fail test cases, aside from visual inspection of screenshots, we mostly rely on exceptions raised by the `findView...()` methods from AndroidViewClient, as well as the family of `assert...()` methods available through the PyUnit framework.\r\n\r\nWhen writing test scripts, while you can find certain views by text sometimes, you will encounter UI elements like an image button, which you need to identify by a unique ID in the view tree. This is when the `dump` tool in AndroidViewClient becomes handy. Just manually navigate to the screen on your connected device, then type that in Terminal and pick out the ID you need from the view tree.\r\n\r\n```\r\n$ dump\r\nandroid.widget.FrameLayout id/no_id/1 \r\n   android.widget.LinearLayout id/no_id/2 \r\n      android.widget.FrameLayout id/no_id/3 \r\n         android.widget.FrameLayout id/no_id/4 \r\n            android.widget.FrameLayout id/no_id/5 \r\n               android.widget.FrameLayout id/no_id/6 \r\n                  android.widget.LinearLayout id/no_id/7 \r\n                     android.widget.RelativeLayout id/no_id/8 \r\n                        android.widget.TextView id/no_id/9 PHOTO 1 OF 2\r\n                        android.widget.ImageButton id/no_id/10 \r\n                        android.widget.ImageButton id/no_id/11 \r\n                     android.widget.RelativeLayout id/no_id/12 \r\n                        android.view.View id/no_id/13 \r\n                           android.view.View id/no_id/14 \r\n                           android.view.View id/no_id/15 \r\n                           android.view.View id/no_id/16 \r\n                        android.widget.Button id/no_id/17 CAPTURE\r\n```\r\n\r\nLastly, it is important to remember that while an app data wipe is performed before and after running each test script to remove the persistent data stored, that is not the case in between test methods within the same script. Instead, the app is killed between test methods, which means in-memory states are destroyed, but disk-persisted states are carried across. For each test to have a true 'fresh start', it is recommended that you separate out your tests into different files, with only a single test method in each `YkspTestCase` subclass.\r\n\r\nAfter all that, here is a template to get you started!\r\n\r\n```python\r\n#! /usr/bin/env python\r\nimport sys\r\nimport os\r\n\r\ntry:\r\n    sys.path.append(os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))\r\nexcept:\r\n    pass\r\n\r\nfrom com.dtmilano.android.viewclient import ViewNotFoundException\r\n\r\ntry:\r\n    sys.path.append(os.environ['YKSP_HOME'])\r\nexcept:\r\n    pass\r\n\r\nfrom yksptestcase import YkspTestCase\r\n\r\nclass MyTestCase(YkspTestCase):\r\n\r\n    def testSomething(self):\r\n        '''\r\n        Tests something... like geese, mustard, cabbages and kings.\r\n        '''\r\n        self.launchApp()\r\n        self.saveScreen('my-start-screen', sleep=1)\r\n\r\n        # Your implementation...\r\n        \r\n\r\nif __name__ == '__main__':\r\n    YkspTestCase.main(sys.argv)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}